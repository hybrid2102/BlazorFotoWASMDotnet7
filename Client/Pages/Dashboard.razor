@page "/dashboard"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div @onclick="() => IsModal=false">
    <h3>Dashboard</h3>
    <NavLink class="btn btn-info me-3 my-3" @onclick="() => IsCreating = true"> Crea Foto</NavLink>

    @if (IsModal)
    {
        <Modal Title="Eliminazione"
               EntitaEliminare=@deleteTextModal
               OnParentMethod="(() => Delete(IdToDelete))" />
    }

    @if (IsCreating)
    {
         <button type="button" @onclick="Reset" class="btn btn-danger">Annulla</button>


        <EditForm Model="@fotoForm" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="name">Nome:</label>
                <InputText id="name" @bind-Value="fotoForm.Foto.Name" class="form-control" />
                <ValidationMessage For="@(() => fotoForm.Foto.Name)" />
            </div>

            <div class="form-group">
                <label for="description">Descrizione:</label>
                <InputText id="description" @bind-Value="fotoForm.Foto.Description" class="form-control" />
                <ValidationMessage For="@(() => fotoForm.Foto.Description)" />
            </div>

            <div class="form-group">
                <label for="isVisible">Visibile:</label>
                <InputCheckbox id="isVisible" @bind-Value="fotoForm.Foto.IsVisible" />
            </div>

            <div class="form-group">
                <label for="image">Carica immagine:</label>
                <InputFile id="image" OnChange="@HandleFileChange" />
            </div>
            <img src="@ImageUri"/>
            <button type="submit" class="btn btn-primary">Salva</button>
        </EditForm>

    }

     @if (IsLoading)
    {
        <Loading />
    }
    else if (fotos?.Fotos != null && fotos.Fotos.Count > 0)
    {
        <table class="table table-dark table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Visible</th>
                    <th>Image</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var foto in fotos.Fotos)
                {
                    <tr>
                        <td>@foto.Id</td>
                        <td>@foto.Name</td>
                        <td>@foto.Description</td>
                        <td>@(foto.IsVisible ? "Si" : "No")</td>
                        <td>@(foto.ImageFile is null ? "No" : "Si")</td>
                        <td>
                            <button class="btn btn-success">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                                </svg>
                            </button>
                            <button type="button" @onclick:stopPropagation=true class="btn btn-warning">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                    <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                </svg>
                            </button>
                            <button type="button" @onclick="() => MostraModale(foto.Id, foto.Name)" @onclick:stopPropagation=true class="btn btn-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                </svg>
                            </button>
                           
                        </td>
                  
                    </tr>
                }
            </tbody>

        </table>
    }
    else
    {
        <p>Nessuna foto disponibile.</p>
    }
</div>



@code {
    private bool result = true;
    private bool IsLoading { get; set; } = true;
    public bool IsCreating { get; set; } = false;
    public bool IsModal { get; set; } = false;
    private string baseUrl = "https://localhost:7285/api/foto/";
    public Foto? newFoto = new Foto();
    public FotoForm fotoForm = new FotoForm { Foto = new Foto(), Image = null };
    public FotoResponse? fotos { get; set; }
    private string deleteTextModal { get; set; } = "";
    private int IdToDelete { get; set; } = 0;
    private string ImageUri { get; set; } = "";
    private byte[]? jolly { get; set; }


    private StreamContent? fileContent;
    private IBrowserFile? file;

    protected override async Task OnInitializedAsync()
    {
        await LoadFotos();
    }

    private async Task LoadFotos(string? search = "", int page = 1)
    {
        IsLoading = true;
        string apiUrl = $"{baseUrl}getfotos?page={page}&search={search}";
        fotos = await HttpClient.GetFromJsonAsync<FotoResponse>(apiUrl);
        IsLoading = false;
    }

    public async Task HandleSubmit()
    {
        string apiUrl = $"{baseUrl}createfoto";

        try
        {
            //lettura + invio al server
            var content = new MultipartFormDataContent();
            // content.Add(new StringContent(newFoto.Name), "Name");
            // content.Add(new StringContent(newFoto.Description), "Description");
            // content.Add(new StringContent(newFoto.IsVisible.ToString()), "IsVisible");

            content.Add(content: fileContent, name: "myFile", fileName: file.Name);

            // Invia la richiesta HTTP con HttpClient
            var response = await HttpClient.PostAsync(apiUrl, content);


            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("successo");
                fotoForm = new FotoForm();
                newFoto = new Foto();
                IsCreating = false;
                await LoadFotos();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    Console.WriteLine($"Error: {errorMessage}");
                }
                else
                {
                    Console.WriteLine("Errore sconosciuto durante la richiesta.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public void Reset()
    {
        fotoForm = new FotoForm();
        IsCreating = !IsCreating;
    }


    public async Task Delete(int id)
    {
        string apiUrl = $"{baseUrl}deletefoto/{id}";
        try
        {
            var response = await HttpClient.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Foto con ID {id} eliminata con successo");
                await LoadFotos(); 
                IsModal = false;

            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Errore durante l'eliminazione: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eccezione durante l'eliminazione: {ex.Message}");
        }
    }
    public async Task MostraModale(int id,string? entityTODelete)
    {
        IsModal = true;
        IdToDelete = id;
        deleteTextModal = entityTODelete;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        //Client:IBrowserFile
        //Server:IFormFile

        long maxFileSize = 1024 * 1024 * 15;

        //lettura + scrittura client side
        file = await e.File.RequestImageFileAsync("image/jpg", 640, 480);
        using Stream fileStream = file.OpenReadStream(maxFileSize);
        using MemoryStream ms = new MemoryStream();

        await fileStream.CopyToAsync(ms); // Il di fileStream viene copiato in ms.

        ImageUri = $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}"; //per preview

        var k = ms.ToArray();



        fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
    }
}
