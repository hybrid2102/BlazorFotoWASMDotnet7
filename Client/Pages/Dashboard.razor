@page "/dashboard"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h3>Dashboard</h3>
<NavLink class="btn btn-info me-3 my-3" @onclick="()=> IsCreating = true"> Crea Foto</NavLink>

@if (IsCreating)
{
    <button type="button" @onclick="Reset" class="btn btn-danger">Annulla</button>

    <EditForm Model="@newFoto" OnValidSubmit="@CreateEntity">
        <DataAnnotationsValidator />

        <div class="form-group w-75 my-4">
            <label for="name">Inserisci nome</label>
            <InputText @bind-Value="newFoto.Name" id="name" class="form-control" />
            <ValidationMessage For="@(()=>newFoto.Name)" />
        </div>

        <div class="form-group w-75 my-4">
            <label for="description">Inserisci descrizione</label>
            <InputText @bind-Value="newFoto.Description" id="description" class="form-control" />
            <ValidationMessage For="@(()=>newFoto.Description)" />
        </div>

        <ValidationSummary />

        <button type="submit" class="btn btn-primary">Salva</button>
    </EditForm>
}



@code {
    public bool IsCreating { get; set; } = false;
    private string? baseUrl;
    public Foto newFoto = new Foto();

    public async Task CreateEntity()
    {
        baseUrl = "/api/foto";
        string apiUrl = $"{baseUrl}/createfoto";

        try
        {
            var response = await HttpClient.PostAsJsonAsync(apiUrl, newFoto);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("successo");
                // Reset form
                newFoto = new Foto();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public void Reset()
    {
        newFoto = new Foto(); 
        IsCreating = !IsCreating;
    }
}
